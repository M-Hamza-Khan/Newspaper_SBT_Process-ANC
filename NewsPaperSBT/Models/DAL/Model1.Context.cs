

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace NewsPaperSBT.Models.DAL
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class NewsPaperSBTEntities : DbContext
{
    public NewsPaperSBTEntities()
        : base("name=NewsPaperSBTEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Contract> Contract { get; set; }

    public virtual DbSet<LoginAttempt> LoginAttempt { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }

    public virtual DbSet<UPC> UPC { get; set; }

    public virtual DbSet<UPCMaster> UPCMaster { get; set; }

    public virtual DbSet<user> user { get; set; }

    public virtual DbSet<UserRegion> UserRegion { get; set; }

    public virtual DbSet<User_Test> User_Test { get; set; }

    public virtual DbSet<Vendor> Vendor { get; set; }

    public virtual DbSet<terms> terms { get; set; }

    public virtual DbSet<Docusign> Docusign { get; set; }

    public virtual DbSet<EmailSettings> EmailSettings { get; set; }

    public virtual DbSet<EmailTemplates> EmailTemplates { get; set; }


    public virtual ObjectResult<Nullable<int>> sp_checkBlockedip(string sessionid)
    {

        var sessionidParameter = sessionid != null ?
            new ObjectParameter("sessionid", sessionid) :
            new ObjectParameter("sessionid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_checkBlockedip", sessionidParameter);
    }


    public virtual ObjectResult<Nullable<int>> sp_checkisuserblocked(string sessionid)
    {

        var sessionidParameter = sessionid != null ?
            new ObjectParameter("sessionid", sessionid) :
            new ObjectParameter("sessionid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_checkisuserblocked", sessionidParameter);
    }


    public virtual ObjectResult<Sp_GetAllUsersByUserId_Result> Sp_GetAllUsersByUserId(Nullable<int> userId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetAllUsersByUserId_Result>("Sp_GetAllUsersByUserId", userIdParameter);
    }


    public virtual ObjectResult<Sp_systemusers_Result> Sp_systemusers()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_systemusers_Result>("Sp_systemusers");
    }


    public virtual ObjectResult<Sp_systemusersbyid_Result> Sp_systemusersbyid(Nullable<int> userid)
    {

        var useridParameter = userid.HasValue ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_systemusersbyid_Result>("Sp_systemusersbyid", useridParameter);
    }


    public virtual int sp_UpdateVendor(Nullable<int> vendorId, string vendorName, string contactName, string email, string phone, string street, string city, string state, string zipCode)
    {

        var vendorIdParameter = vendorId.HasValue ?
            new ObjectParameter("VendorId", vendorId) :
            new ObjectParameter("VendorId", typeof(int));


        var vendorNameParameter = vendorName != null ?
            new ObjectParameter("VendorName", vendorName) :
            new ObjectParameter("VendorName", typeof(string));


        var contactNameParameter = contactName != null ?
            new ObjectParameter("ContactName", contactName) :
            new ObjectParameter("ContactName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var streetParameter = street != null ?
            new ObjectParameter("Street", street) :
            new ObjectParameter("Street", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var zipCodeParameter = zipCode != null ?
            new ObjectParameter("ZipCode", zipCode) :
            new ObjectParameter("ZipCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateVendor", vendorIdParameter, vendorNameParameter, contactNameParameter, emailParameter, phoneParameter, streetParameter, cityParameter, stateParameter, zipCodeParameter);
    }


    public virtual int UpadteUserAcountType(Nullable<int> uid)
    {

        var uidParameter = uid.HasValue ?
            new ObjectParameter("uid", uid) :
            new ObjectParameter("uid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpadteUserAcountType", uidParameter);
    }


    public virtual ObjectResult<string> sp_userProfileStatus(Nullable<int> userid)
    {

        var useridParameter = userid.HasValue ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_userProfileStatus", useridParameter);
    }


    public virtual ObjectResult<string> sp_CheckUpcVerficationnew(string code, Nullable<int> attempt, string browserid, ObjectParameter statusLog)
    {

        var codeParameter = code != null ?
            new ObjectParameter("Code", code) :
            new ObjectParameter("Code", typeof(string));


        var attemptParameter = attempt.HasValue ?
            new ObjectParameter("attempt", attempt) :
            new ObjectParameter("attempt", typeof(int));


        var browseridParameter = browserid != null ?
            new ObjectParameter("browserid", browserid) :
            new ObjectParameter("browserid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CheckUpcVerficationnew", codeParameter, attemptParameter, browseridParameter, statusLog);
    }


    public virtual ObjectResult<string> sp_CheckUpcVerfication(string code, Nullable<int> attempt, string browserid, string result)
    {

        var codeParameter = code != null ?
            new ObjectParameter("Code", code) :
            new ObjectParameter("Code", typeof(string));


        var attemptParameter = attempt.HasValue ?
            new ObjectParameter("attempt", attempt) :
            new ObjectParameter("attempt", typeof(int));


        var browseridParameter = browserid != null ?
            new ObjectParameter("browserid", browserid) :
            new ObjectParameter("browserid", typeof(string));


        var resultParameter = result != null ?
            new ObjectParameter("Result", result) :
            new ObjectParameter("Result", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CheckUpcVerfication", codeParameter, attemptParameter, browseridParameter, resultParameter);
    }


    public virtual ObjectResult<Sp_GetAllUsers_Result> Sp_GetAllUsers()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetAllUsers_Result>("Sp_GetAllUsers");
    }


    public virtual ObjectResult<Sp_gettermsandconditions_Result> Sp_gettermsandconditions()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_gettermsandconditions_Result>("Sp_gettermsandconditions");
    }


    public virtual ObjectResult<Sp_gettermsandconditionsfiles_Result> Sp_gettermsandconditionsfiles()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_gettermsandconditionsfiles_Result>("Sp_gettermsandconditionsfiles");
    }

}

}

